import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  Brush
} from 'recharts';
import { CSVLink } from 'react-csv';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import './Appoverview.css';

interface AppOption {
  value: string;
  label: string;
}

interface UtilizationData {
  app: string;
  datetime: string;
  instance: number;
  instance_type: string;
  state: string;
  value: number;
}

interface ProcessedData {
  name: string;
  [key: string]: number | string;
}

const AppOverview: React.FC = () => {
  const [appOptions, setAppOptions] = useState<AppOption[]>([]);
  const [selectedAppId, setSelectedAppId] = useState<string>('');
  const [startDate, setStartDate] = useState<Date | undefined>(undefined);
  const [endDate, setEndDate] = useState<Date | undefined>(undefined);
  const [utilizationData, setUtilizationData] = useState<UtilizationData[]>([]);
  const [dateRangeType, setDateRangeType] = useState<'daily' | 'weekly' | 'monthly'>('daily');
  const [showInsights, setShowInsights] = useState(false);

  useEffect(() => {
    fetchApps();
  }, []);

  const fetchApps = async () => {
    try {
      const response = await axios.get('/fetch_apps');
      if (response.data && Array.isArray(response.data.Data)) {
        const apps = response.data.Data.map((app: { _id: string }) => ({
          value: app._id,
          label: `AppID: ${app._id}`
        }));
        setAppOptions(apps);
      } else {
        console.error('Unexpected response format from /fetch_apps');
      }
    } catch (error) {
      console.error('Error fetching apps:', error);
    }
  };

  const formatDate = (date: Date): string => {
    return date.toISOString().slice(0, 19).replace('T', ' ') + '.00';
  };

  const fetchUtilizationData = async () => {
    if (!selectedAppId || !startDate || !endDate) return;

    const postData = {
      appID: selectedAppId,
      from_time: formatDate(startDate),
      to_time: formatDate(endDate)
    };

    try {
      const response = await axios.post('/fetch_utilisation', postData);
      if (response.data && Array.isArray(response.data.data)) {
        setUtilizationData(response.data.data);
      } else {
        console.error('Unexpected response format from /fetch_utilisation');
      }
    } catch (error) {
      console.error('Error fetching utilization data:', error);
    }
  };

  const handleCalculate = () => {
    fetchUtilizationData();
  };

  const processUtilizationData = (): ProcessedData[] => {
    const dataMap: { [key: string]: ProcessedData } = {};

    utilizationData.forEach(item => {
      if (!dataMap[item.datetime]) {
        dataMap[item.datetime] = { name: item.datetime };
      }
      dataMap[item.datetime][`Instance ${item.instance}`] = item.value;
    });

    return Object.values(dataMap);
  };

  const calculateInsights = () => {
    if (utilizationData.length === 0) return { averageUsage: '0', maxUsageDay: 'N/A', minUsageDay: 'N/A' };

    const totalUsage = utilizationData.reduce((acc, d) => acc + d.value, 0);
    const averageUsage = totalUsage / utilizationData.length;
    const maxUsageDay = utilizationData.reduce((max, d) => d.value > max.value ? d : max, utilizationData[0]);
    const minUsageDay = utilizationData.reduce((min, d) => d.value < min.value ? d : min, utilizationData[0]);

    return {
      averageUsage: averageUsage.toFixed(2),
      maxUsageDay: `${maxUsageDay.datetime} (${maxUsageDay.value}%)`,
      minUsageDay: `${minUsageDay.datetime} (${minUsageDay.value}%)`,
    };
  };

  const processedData = processUtilizationData();

  const peakLoad = processedData.length > 0 ? Math.max(...processedData.flatMap(d => Object.values(d).filter((v): v is number => typeof v === 'number'))) : 0;
  const minLoad = processedData.length > 0 ? Math.min(...processedData.flatMap(d => Object.values(d).filter((v): v is number => typeof v === 'number'))) : 0;
  
  const costIncurred = processedData.reduce((acc, d) => 
    acc + Object.values(d)
      .filter((v): v is number => typeof v === 'number')
      .reduce((sum, v) => sum + v * 0.5, 0)
  , 0);

  const potentialSavings = processedData.reduce((acc, d) => 
    acc + Object.values(d)
      .filter((v): v is number => typeof v === 'number' && v < 50)
      .reduce((sum, v) => sum + v * 0.5 * 0.3, 0)
  , 0);

  const exportData = processedData.map(d => ({ ...d, instance: 'all instances' }));

  const instances = Array.from(new Set(utilizationData.map(d => d.instance)));

  return (
    <div className="app-container">
      <div className="app-app-overview">
        <div className="app-header">
          <div className="app-header-top">
            <div className="app-app-info">
              <select
                className="app-app-select"
                value={selectedAppId}
                onChange={(e) => setSelectedAppId(e.target.value)}
              >
                <option value="" disabled>Select App ID</option>
                {appOptions.map(({ value, label }) => (
                  <option key={value} value={value}>{label}</option>
                ))}
              </select>
              <div className="app-date-picker">
                <DatePicker
                  selected={startDate}
                  onChange={(date: Date | null) => setStartDate(date ?? undefined)}
                  selectsStart
                  startDate={startDate}
                  endDate={endDate}
                  placeholderText="Select start date"
                />
                <DatePicker
                  selected={endDate}
                  onChange={(date: Date | null) => setEndDate(date ?? undefined)}
                  selectsEnd
                  startDate={startDate}
                  endDate={endDate}
                  minDate={startDate}
                  placeholderText="Select end date"
                />
              </div>
            </div>
            <div className="app-stats">
              <div className="app-stat">
                <h5>Peak Load</h5>
                <p>{peakLoad.toFixed(2)}%</p>
              </div>
              <div className="app-stat">
                <h5>Min Load</h5>
                <p>{minLoad.toFixed(2)}%</p>
              </div>
              <div className="app-stat">
                <h5>Cost Incurred</h5>
                <p>${costIncurred.toFixed(2)}</p>
              </div>
            </div>
          </div>
          <div className="app-header-bottom">
            <div className="app-date-controls">
              <div className="app-date-range-options">
                {['daily', 'weekly', 'monthly'].map((type) => (
                  <label key={type} className="app-radio-label">
                    <input
                      type="radio"
                      value={type}
                      checked={dateRangeType === type}
                      onChange={() => setDateRangeType(type as 'daily' | 'weekly' | 'monthly')}
                    />
                    {type.charAt(0).toUpperCase() + type.slice(1)}
                  </label>
                ))}
              </div>
            </div>
            <button className="app-btn app-primary" onClick={handleCalculate}>Apply Filter</button>
            <button className="app-btn app-secondary" onClick={() => setShowInsights(true)}>Quick Insights</button>
          </div>
        </div>

        <div className="app-chart-container">
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={processedData} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" />
              <YAxis />
              <Tooltip />
              <Legend />
              {instances.map((instance, index) => (
                <Line
                  key={instance}
                  type="monotone"
                  dataKey={`Instance ${instance}`}
                  stroke={`hsl(${index * 360 / instances.length}, 70%, 50%)`}
                  dot={false}
                />
              ))}
              <Brush dataKey="name" height={30} stroke="#8884d8" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {showInsights && (
          <div className="app-insights">
            <h3>Quick Insights</h3>
            <p>Average Usage: {calculateInsights().averageUsage}%</p>
            <p>Max Usage Day: {calculateInsights().maxUsageDay}</p>
            <p>Min Usage Day: {calculateInsights().minUsageDay}</p>
            <p>Potential Savings: ${potentialSavings.toFixed(2)}</p>
            <button className="app-btn app-secondary" onClick={() => setShowInsights(false)}>Close Insights</button>
          </div>
        )}

        <CSVLink data={exportData} filename={"utilization_data.csv"}>
          <button className="app-btn app-secondary">Export CSV</button>
        </CSVLink>
      </div>
    </div>
  );
};

export default AppOverview;
