import React, { useState, useEffect } from 'react';
import { FaUserEdit, FaServer, FaCheckCircle, FaExclamationTriangle } from 'react-icons/fa';
import axios from 'axios';
import './Threshold.css';

interface App {
  _id: string;
  name: string;
}

const Threshold: React.FC = () => {
  const [apps, setApps] = useState<App[]>([]);
  const [selectedApp, setSelectedApp] = useState('');
  const [instanceType, setInstanceType] = useState('256mb');
  const [reason, setReason] = useState('');
  const [urgency, setUrgency] = useState('low');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchApps();
  }, []);

  const fetchApps = async () => {
    try {
      const response = await axios.get('/fetch_apps');
      setApps(response.data.Data);
    } catch (error) {
      console.error('Error fetching apps:', error);
      setError('Failed to fetch apps. Please try again later.');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');

    try {
      // Simulating API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      // Here you would typically make an actual API call to submit the request
      setIsSuccess(true);
    } catch (error) {
      console.error('Error submitting request:', error);
      setError('Failed to submit request. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="threshold-change-container wells-fargo-theme">
      <h1 className="threshold-change-title">
        <FaUserEdit className="title-icon" />
        Request Threshold Change
      </h1>
      <form className="threshold-change-form" onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="appSelect" className="form-label">
            Select Application
          </label>
          <select
            id="appSelect"
            className="form-select"
            value={selectedApp}
            onChange={(e) => setSelectedApp(e.target.value)}
            required
          >
            <option value="">Select an application</option>
            {apps.map((app) => (
              <option key={app._id} value={app._id}>
                {app.name}
              </option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label htmlFor="instanceType" className="form-label">
            <FaServer className="label-icon" />
            Select Instance Type
          </label>
          <select
            id="instanceType"
            className="form-select"
            value={instanceType}
            onChange={(e) => setInstanceType(e.target.value)}
          >
            <option value="256mb">256 MB</option>
            <option value="512mb">512 MB</option>
            <option value="1gb">1 GB</option>
            <option value="2gb">2 GB</option>
            <option value="2.5gb">2.5 GB</option>
          </select>
        </div>

        <div className="form-group">
          <label htmlFor="reason" className="form-label">
            Reason for Change
          </label>
          <textarea
            id="reason"
            className="form-textarea"
            placeholder="Please provide a brief explanation for the threshold change request..."
            rows={4}
            value={reason}
            onChange={(e) => setReason(e.target.value)}
            required
          ></textarea>
        </div>

        <div className="form-group">
          <label className="form-label">Urgency Level</label>
          <div className="urgency-options">
            <label>
              <input
                type="radio"
                value="low"
                checked={urgency === 'low'}
                onChange={() => setUrgency('low')}
              />
              Low
            </label>
            <label>
              <input
                type="radio"
                value="medium"
                checked={urgency === 'medium'}
                onChange={() => setUrgency('medium')}
              />
              Medium
            </label>
            <label>
              <input
                type="radio"
                value="high"
                checked={urgency === 'high'}
                onChange={() => setUrgency('high')}
              />
              High
            </label>
          </div>
        </div>

        <button type="submit" className="submit-button" disabled={isSubmitting}>
          {isSubmitting ? 'Submitting...' : 'Submit Request'}
        </button>
      </form>

      {isSuccess && (
        <div className="success-message">
          <FaCheckCircle className="success-icon" />
          Your request has been submitted successfully!
        </div>
      )}

      {error && (
        <div className="error-message">
          <FaExclamationTriangle className="error-icon" />
          {error}
        </div>
      )}
    </div>
  );
};

export default Threshold;
.wells-fargo-theme {
    --wf-red: #D71E28;
    --wf-gold: #FFCD41;
    --wf-gray: #4D4F53;
    --wf-light-gray: #F8F8F8;
    --wf-white: #FFFFFF;
    --wf-black: #000000;
    font-family: 'Open Sans', sans-serif;
  }
  
  .threshold-change-container {
    max-width: 40rem;
    margin: 2rem auto;
    padding: 2rem;
    background-color: var(--wf-white);
    border-radius: 0.5rem;
    box-shadow: 0 0.25rem 1rem rgba(0, 0, 0, 0.1);
  }
  
  .threshold-change-title {
    font-size: 1.8rem;
    color: var(--wf-red);
    margin-bottom: 2rem;
    display: flex;
    align-items: center;
  }
  
  .title-icon {
    margin-right: 0.5rem;
    color: var(--wf-red);
  }
  
  .threshold-change-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
  }
  
  .form-label {
    display: flex;
    align-items: center;
    font-size: 1rem;
    font-weight: bold;
    color: var(--wf-gray);
    margin-bottom: 0.5rem;
  }
  
  .label-icon {
    margin-right: 0.5rem;
    color: var(--wf-red);
  }
  
  .form-select,
  .form-textarea {
    width: 100%;
    padding: 0.75rem;
    font-size: 1rem;
    border: 1px solid var(--wf-gray);
    border-radius: 0.25rem;
    background-color: var(--wf-light-gray);
    transition: border-color 0.3s, box-shadow 0.3s;
  }
  
  .form-select:focus,
  .form-textarea:focus {
    outline: none;
    border-color: var(--wf-red);
    box-shadow: 0 0 0 0.125rem rgba(215, 30, 40, 0.25);
  }
  
  .form-textarea {
    resize: vertical;
    min-height: 6rem;
  }
  
  .urgency-options {
    display: flex;
    gap: 1rem;
  }
  
  .urgency-options label {
    display: flex;
    align-items: center;
    cursor: pointer;
  }
  
  .urgency-options input[type="radio"] {
    margin-right: 0.5rem;
  }
  
  .submit-button {
    display: block;
    width: 100%;
    padding: 0.75rem;
    font-size: 1rem;
    font-weight: bold;
    color: var(--wf-white);
    background-color: var(--wf-red);
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  
  .submit-button:hover {
    background-color: #B01820;
  }
  
  .submit-button:disabled {
    background-color: var(--wf-gray);
    cursor: not-allowed;
  }
  
  .success-message,
  .error-message {
    margin-top: 1.5rem;
    padding: 1rem;
    border-radius: 0.25rem;
    display: flex;
    align-items: center;
  }
  
  .success-message {
    background-color: #DFF0D8;
    color: #3C763D;
  }
  
  .error-message {
    background-color: #F2DEDE;
    color: #A94442;
  }
  
  .success-icon,
  .error-icon {
    margin-right: 0.5rem;
  }
  
  @media (max-width: 48rem) {
    .threshold-change-container {
      padding: 1rem;
      margin: 1rem;
    }
  
    .threshold-change-title {
      font-size: 1.5rem;
    }
  }
