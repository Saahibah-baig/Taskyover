import React, { useState, useEffect } from 'react';
import { FaArrowDown, FaArrowUp } from 'react-icons/fa';
import Monthutils from './Monthutils';
import styles from './Monthly.module.css'; // Import CSS module

interface DayData {
  id: string;
  time: string;
  action: string;
}

interface WeekData {
  Monday: DayData[];
  Tuesday: DayData[];
  Wednesday: DayData[];
  Thursday: DayData[];
  Friday: DayData[];
  Saturday: DayData[];
  Sunday: DayData[];
  [key: string]: DayData[]; // Index signature for string keys
}

interface WeekDates {
  start: Date;
  end: Date;
}

function Monthly() {
  const [expandedWeeks, setExpandedWeeks] = useState<boolean[]>([false, false, false, false]);
  const [selectedWeeks, setSelectedWeeks] = useState<string[]>(['', '', '', '']); // Use an array to store selected weeks
  const [weeksData, setWeeksData] = useState<WeekData[]>([]);
  const [weekDates, setWeekDates] = useState<WeekDates[]>([]);

  useEffect(() => {
    generateWeeksData();
  }, []);

  const generateWeeksData = () => {
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth();
    const nextMonth = currentMonth + 1;

    const nextYear = nextMonth > 11 ? currentDate.getFullYear() + 1 : currentDate.getFullYear();
    const nextMonthIndex = nextMonth > 11 ? 0 : nextMonth;

    const daysInNextMonth = new Date(nextYear, nextMonthIndex + 1, 0).getDate();

    const initialWeeksData = Array.from({ length: 4 }, () => ({
      Monday: [], Tuesday: [], Wednesday: [], Thursday: [], Friday: [], Saturday: [], Sunday: []
    }));

    const weekStartDates: WeekDates[] = [];
    let startDate = new Date(nextYear, nextMonthIndex, 1);

    for (let i = 0; i < 4; i++) {
      const endDate = new Date(startDate);
      endDate.setDate(startDate.getDate() + 6);
      weekStartDates.push({ start: new Date(startDate), end: new Date(endDate) });
      startDate.setDate(startDate.getDate() + 7);
    }

    setWeeksData(initialWeeksData);
    setExpandedWeeks(Array(4).fill(false));
    setWeekDates(weekStartDates);
  };

  const toggleWeekExpansion = (weekIndex: number) => {
    setExpandedWeeks((prev) => prev.map((expanded, i) => (i === weekIndex ? !expanded : expanded)));
  };

  const setAsWeek = (fromWeek: number, toWeek: number) => {
    setWeeksData((prevWeeks) => {
      const newWeeksData = [...prevWeeks];
      Object.keys(prevWeeks[fromWeek]).forEach(day => {
        newWeeksData[toWeek][day] = [...prevWeeks[fromWeek][day]];
      });
      return newWeeksData;
    });
  };

  const handleCopyClick = (weekIndex: number) => {
    if (selectedWeeks[weekIndex] !== '') {
      setAsWeek(parseInt(selectedWeeks[weekIndex]), weekIndex);
    } else {
      alert('Please select a week to copy from.');
    }
  };

  const isTileDisabled = (date: Date) => {
    const currentDate = new Date();
    return date < currentDate;
  };

  const handleWeekSelectChange = (e: React.ChangeEvent<HTMLSelectElement>, weekIndex: number) => {
    const newSelectedWeeks = [...selectedWeeks];
    newSelectedWeeks[weekIndex] = e.target.value;
    setSelectedWeeks(newSelectedWeeks);
  };

  return (
    <div className={styles.app}>
      {expandedWeeks.map((expanded, weekIndex) => (
        <div key={weekIndex} className={styles.monthlyWeek}>
          <h3 onClick={() => toggleWeekExpansion(weekIndex)}>
            Week {weekIndex + 1} {expanded ? <FaArrowUp /> : <FaArrowDown />}
            {weekDates[weekIndex] && (
              <span className={styles.weekDates}>
                {`${weekDates[weekIndex].start.getDate()} ${getMonthName(weekDates[weekIndex].start.getMonth())} ${weekDates[weekIndex].start.getFullYear()} to ${weekDates[weekIndex].end.getDate()} ${getMonthName(weekDates[weekIndex].end.getMonth())} ${weekDates[weekIndex].end.getFullYear()}`}
              </span>
            )}
          </h3>
          {expanded && (
            <div>
              <Monthutils weekIndex={weekIndex} weekData={weeksData[weekIndex]} setWeeksData={setWeeksData} />
              <select onChange={(e) => handleWeekSelectChange(e, weekIndex)} value={selectedWeeks[weekIndex]} className={styles.copySelect}>
                <option value="">Select Week to Copy From</option>
                {weeksData.map((_, index) => (
                  <option key={index} value={index} disabled={index === weekIndex}>
                    Week {index + 1}
                  </option>
                ))}
              </select>
              <button onClick={() => handleCopyClick(weekIndex)} className={styles.copyButton}>Copy</button>
            </div>
          )}
        </div>
      ))}
    </div>
  );
}

function getMonthName(monthIndex: number) {
  const months = [
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];
  return months[monthIndex];
}

export default Monthly;
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family: Arial, sans-serif;
    background-color: #f4f7f9;
  }
  
  .app {
    font-family: Arial, sans-serif;
    width: 95%;
    margin: 0 auto;
    padding: 1.25rem;
    background-color: #f0f0f0;
    border: 0.05rem solid #ccc;
    border-radius: 0.5rem;
    box-shadow: 0 0 1rem rgba(0, 0, 0, 0.1);
  }
  
  .monthlyWeek {
    margin-bottom: 1.25rem;
    background-color: #fff;
    border: 0.05rem solid #ddd;
    border-radius: 0.25rem;
    overflow: hidden;
  }
  
  .monthlyWeek h3 {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: #f0f0f0;
    color: #333;
    font-size: 1.125rem;
    padding: 0.625rem 1.25rem;
    margin: 0;
    cursor: pointer;
  }
  
  .monthlyWeek h3:hover {
    background-color: #e0e0e0;
  }
  
  .monthlyWeek .weekDates {
    padding: 0.625rem 1.25rem;
    font-size: 0.875rem;
    color: #666;
  }
  
  .monthlyWeek .weekDates span {
    display: block;
  }
  
  .monthlyWeek .weekDates span:first-child {
    margin-bottom: 0.3125rem;
  }
  
  .monthlyWeek .weekDates span:last-child {
    font-weight: bold;
  }
  
  .monthlyWeek .copySelect {
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    border: 0.05rem solid #ccc;
    border-radius: 0.25rem;
    margin-right: 0.625rem;
  }
  
  .monthlyWeek .copyButton {
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    background-color: #0071bc;
    color: #fff;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
  }
  
  .dates {
    text-align: center;
    font-size: 1.5625rem;
    font-weight: bolder;
  }
  
  .monthlyWeek .copyButton:hover {
    background-color: #005a8c;
  }
  
  .monthlyWeek .copyButton:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }
  
  @media (max-width: 600px) {
    .app {
      padding: 0.625rem;
    }
  
    .monthlyWeek h3 {
      font-size: 1rem;
    }
  
    .monthlyWeek .copySelect,
    .monthlyWeek .copyButton {
      font-size: 0.75rem;
    }
  }
  
