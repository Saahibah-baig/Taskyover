import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
  Brush
} from 'recharts';
import { CSVLink } from 'react-csv';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import { Link } from 'react-router-dom';
import './Appoverview.css';

interface AppOption {
  value: string;
  label: string;
}

interface UtilizationData {
  app: string;
  instanceNo: string;
  dateTime: string;
  value: number;
  type: string;
  state: string;
}

interface ProcessedData {
  name: string;
  usage: number;
  policyUsage: number;
}

const AppOverview: React.FC = () => {
  const [appOptions, setAppOptions] = useState<AppOption[]>([]);
  const [selectedAppId, setSelectedAppId] = useState<string>('');
  const [startDate, setStartDate] = useState<Date | null>(null);
  const [endDate, setEndDate] = useState<Date | null>(null);
  const [utilizationData, setUtilizationData] = useState<UtilizationData[]>([]);
  const [policyUtilizationData, setPolicyUtilizationData] = useState<UtilizationData[]>([]);
  const [dateRangeType, setDateRangeType] = useState<'daily' | 'weekly' | 'monthly'>('daily');
  const [showInsights, setShowInsights] = useState(false);
  const [instances, setInstances] = useState<string[]>([]);
  const [selectedInstance, setSelectedInstance] = useState<string>('');

  useEffect(() => {
    fetchApps();
  }, []);

  useEffect(() => {
    if (utilizationData.length > 0) {
      const uniqueInstances = Array.from(new Set(utilizationData.map(d => d.instanceNo)));
      setInstances(uniqueInstances);
      setSelectedInstance(uniqueInstances[0]);
    }
  }, [utilizationData]);

  const fetchApps = async () => {
    try {
      const response = await axios.get('/fetch_apps');
      const apps = response.data.map((app: any) => ({
        value: app.id,
        label: `AppID: ${app.id}`
      }));
      setAppOptions(apps);
    } catch (error) {
      console.error('Error fetching apps:', error);
    }
  };

  const fetchUtilizationData = async () => {
    if (!selectedAppId || !startDate || !endDate) return;

    try {
      const [utilizationResponse, policyUtilizationResponse] = await Promise.all([
        axios.get('/fetch_utilisation', {
          params: {
            app_id: selectedAppId,
            start_time: startDate.toISOString(),
            end_time: endDate.toISOString(),
            date_range_type: dateRangeType
          }
        }),
        axios.get('/fetch_utlisationbasedpolicy', {
          params: {
            app_id: selectedAppId,
            start_time: startDate.toISOString(),
            end_time: endDate.toISOString(),
            date_range_type: dateRangeType
          }
        })
      ]);

      setUtilizationData(utilizationResponse.data.data);
      setPolicyUtilizationData(policyUtilizationResponse.data.data);
    } catch (error) {
      console.error('Error fetching utilization data:', error);
    }
  };

  const handleCalculate = () => {
    fetchUtilizationData();
  };

  const processUtilizationData = (): ProcessedData[] => {
    const standardData = utilizationData.filter(item => item.instanceNo === selectedInstance);
    const policyData = policyUtilizationData.filter(item => item.instanceNo === selectedInstance);

    return standardData.map(item => {
      const policyItem = policyData.find(p => p.dateTime === item.dateTime);
      return {
        name: item.dateTime,
        usage: item.value,
        policyUsage: policyItem ? policyItem.value : 0
      };
    });
  };

  const calculateInsights = () => {
    if (utilizationData.length === 0) return { averageUsage: '0', maxUsageDay: 'N/A', minUsageDay: 'N/A' };

    const instanceData = utilizationData.filter(item => item.instanceNo === selectedInstance);
    const totalUsage = instanceData.reduce((acc, d) => acc + d.value, 0);
    const averageUsage = totalUsage / instanceData.length;
    const maxUsageDay = instanceData.reduce((max, d) => d.value > max.value ? d : max, instanceData[0]);
    const minUsageDay = instanceData.reduce((min, d) => d.value < min.value ? d : min, instanceData[0]);

    return {
      averageUsage: averageUsage.toFixed(2),
      maxUsageDay: `${maxUsageDay.dateTime} (${maxUsageDay.value}%)`,
      minUsageDay: `${minUsageDay.dateTime} (${minUsageDay.value}%)`,
    };
  };

  const processedData = processUtilizationData();

  const peekLoad = processedData.length > 0 ? Math.max(...processedData.map(d => d.usage)) : 0;
  const minLoad = processedData.length > 0 ? Math.min(...processedData.map(d => d.usage)) : 0;
  const costIncurred = processedData.reduce((acc, d) => acc + d.usage * 0.5, 0);
  const potentialSavings = processedData.reduce((acc, d) => (d.usage < 50) ? acc + (d.usage * 0.5 * 0.3) : acc, 0);
  const exportData = processedData.map(d => ({ date: d.name, usage: d.usage, policyUsage: d.policyUsage, instance: selectedInstance }));

  return (
    <div className="app-container">
      <div className="app-app-overview">
        <div className="app-header">
          <div className="app-header-top">
            <div className="app-app-info">
              <select
                className="app-app-select"
                value={selectedAppId}
                onChange={(e) => setSelectedAppId(e.target.value)}
              >
                <option value="" disabled>Select App ID</option>
                {appOptions.map(({ value, label }) => (
                  <option key={value} value={value}>{label}</option>
                ))}
              </select>
              <div className="app-date-picker">
                <DatePicker
                  selected={startDate}
                  onChange={(date: Date | null) => setStartDate(date)}
                  selectsStart
                  startDate={startDate}
                  endDate={endDate}
                  placeholderText="Select start date"
                />
                <DatePicker
                  selected={endDate}
                  onChange={(date: Date | null) => setEndDate(date)}
                  selectsEnd
                  startDate={startDate}
                  endDate={endDate}
                  minDate={startDate}
                  placeholderText="Select end date"
                />
              </div>
            </div>
            <div className="app-stats">
              <div className="app-stat">
                <h5>Peak Load</h5>
                <p>{peekLoad.toFixed(2)}%</p>
              </div>
              <div className="app-stat">
                <h5>Min Load</h5>
                <p>{minLoad.toFixed(2)}%</p>
              </div>
              <div className="app-stat">
                <h5>Cost Incurred</h5>
                <p>${costIncurred.toFixed(2)}</p>
              </div>
            </div>
          </div>
          <div className="app-header-bottom">
            <div className="app-date-controls">
              <div className="app-date-range-options">
                {['daily', 'weekly', 'monthly'].map((type) => (
                  <label key={type} className="app-radio-label">
                    <input
                      type="radio"
                      value={type}
                      checked={dateRangeType === type}
                      onChange={() => setDateRangeType(type as 'daily' | 'weekly' | 'monthly')}
                    />
                    {type.charAt(0).toUpperCase() + type.slice(1)}
                  </label>
                ))}
              </div>
            </div>
            <button className="app-btn app-primary" onClick={handleCalculate}>Apply Filter</button>
            <button className="app-btn app-secondary" onClick={() => setShowInsights(true)}>Quick Insights</button>
          </div>
        </div>

        <div className="app-instance-selector">
          {instances.map((instance) => (
            <label key={instance} className="app-radio-label">
              <input
                type="radio"
                value={instance}
                checked={selectedInstance === instance}
                onChange={() => setSelectedInstance(instance)}
              />
              Instance {instance}
            </label>
          ))}
        </div>

        <div className="app-chart-container">
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={processedData} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>
              <CartesianGrid stroke="#f5f5f5" />
              <XAxis dataKey="name" />
              <YAxis label={{ value: 'Usage (%)', angle: -90, position: 'insideLeft' }} />
              <Tooltip contentStyle={{ backgroundColor: '#fff', border: '1px solid #ccc' }} />
              <Legend verticalAlign="top" height={36} />
              <Line type="monotone" dataKey="usage" stroke="#1890ff" name={`Instance ${selectedInstance} Usage`} />
              <Brush dataKey="name" height={30} stroke="#1890ff" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="app-chart-container">
          <ResponsiveContainer width="100%" height={400}>
            <LineChart data={processedData} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>
              <CartesianGrid stroke="#f5f5f5" />
              <XAxis dataKey="name" />
              <YAxis label={{ value: 'Usage (%)', angle: -90, position: 'insideLeft' }} />
              <Tooltip contentStyle={{ backgroundColor: '#fff', border: '1px solid #ccc' }} />
              <Legend verticalAlign="top" height={36} />
              <Line type="monotone" dataKey="usage" stroke="#1890ff" name={`Instance ${selectedInstance} Usage`} />
              <Line type="monotone" dataKey="policyUsage" stroke="#82ca9d" name={`Instance ${selectedInstance} Policy Usage`} />
              <Brush dataKey="name" height={30} stroke="#1890ff" />
            </LineChart>
          </ResponsiveContainer>
        </div>

        <div className="app-footer">
          <div className="app-savings">
            <h5>Potential Savings</h5>
            <p>${potentialSavings.toFixed(2)}</p>
          </div>
          <div className="app-buttons">
            <CSVLink data={exportData} filename={"export.csv"} className="app-btn app-primary">Export CSV</CSVLink>
            <Link to="/" className="app-btn app-secondary">Go Home</Link>
          </div>
        </div>
      </div>

      {showInsights && (
        <div className="app-modal">
          <div className="app-modal-content">
            <h2>Quick Insights</h2>
            <p>Average Usage: {calculateInsights().averageUsage}%</p>
            <p>Max Usage Day: {calculateInsights().maxUsageDay}</p>
            <p>Min Usage Day: {calculateInsights().minUsageDay}</p>
            <button className="app-btn app-secondary" onClick={() => setShowInsights(false)}>Close</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default AppOverview;
